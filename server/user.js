/**
 * Created by xianm on 2018-03-02.
 */
const express = require('express')
const utils = require('utility')
const Router = express.Router()
const model = require('./model')
const User = model.getModel('user')
// make sure the password and version number are not displayed in frontend
const _filter = {'pwd':0, '__v': 0}

Router.get('/list', (req, res) => {
    const {type} = req.query
    User.find({type},(err, doc) => res.json({code:0,data:doc}))
})
Router.post('/login', (req, res) => {
    const {user, pwd} = req.body
    // using _filter is because we don't want password to be exposed when finding users
    User.findOne({user, pwd:md5Pwd(pwd)}), _filter, (err, doc)=>{
        if(!doc){
            return res.json({code: 1, msg: 'the user does not exist or password is wrong'})
        }else{
            // normally we should use the doc._id which is GUID generated by mongodb,
            // this id can uniquely identify the user
            res.cookie('userId', doc._id)
            return res.json({code: 0, data: doc})
        }
    }
})
Router.post('update',(req, res)=>{
    // even '/info' has already checked the existance of cookie, but
    // it's possible that the user has opened two webpages, one webpage is logged out but the other
    // webpage is still sending request, so we need to check the cookie again here
    const {userId} = req.cookies
    if(!userId){
        return json.dumps({code:1})
    }
    const body = req.body
    // find the user by id and update it
    User.findByIdAndUpdate(userId, body,(err, doc)=>{
        const data = Object.assign({},{
            user:doc.user,
            type:doc.type
        },body)
        return res.json({code: 0, data})
    })
})
Router.post('/register', (req, res) => {
    const {user, pwd, type} = req.body
    User.findOne({user}, (err, doc) => {
        if(doc){
            return res.json({code: 1, msg:'username is already existing'})
        }
        const userModel = new User({user, type, pwd: md5Pwd(pwd)})
        userModel.save((err, doc)=>{
            if(err){
                return res.json({code: 1, msg:'error happened in backend'})
            }
            const {user, type, _id} = doc
            res.cookie('userid', _id)
            return res.json({code: 0, data:{user, type, _id}})
        })
        // you cannot use User.create method as it cannot achieve user's id,
        // there exist ids only after users are created
        // User.create({user, pwd:md5Pwd(pwd), type}, (err, doc) => {
        //     if(err){
        //         return res.json({code: 1, msg:'error happened in backend'})
        //     }
        //     return res.json({code: 0})
        // })
    })
})
Router.get('/info', (req, res) => {
    const {userId} = req.cookies
    if(!userId){
        return res.json({code: 1})
    }
    User.findOne({_id: userId}, _filter, (err, doc) =>{
        if(err){
            return res.json({code:1, msg:'something wrong happened in backend'})
        }
        if(doc){
            return res.json({code: 0, data:doc})
        }
    })
})
module.exports = Router

function md5Pwd(pwd){
    const salt = 'Chris_can_code_skf@%*jk3&SJF~'
    return utils.md5(utils.md5(pwd + salt))
}